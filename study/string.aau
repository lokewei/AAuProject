io.open();//打开控制台

/*
一、AAuto的字符串与其他编程语言的区别

    1、可以包含'\0',可以包含二进制数据,甚至可以将二进制文件直接放到字符串变量中
        例如: 字符串 = $"\test.rar"
        
    2、提供两种操作符分别获取字符串中指定位置字符的字节码或字符,
        使用普通下标获取字节码,使用直接下标获取单字符
        
    3、提供多种不同形式表示字符串字面值的语法.
        3.1 双引号中表示普通字符串,与自然用法一致.
        3.2 单引号中表示转义字符串,与C系语法一致
        3.3 可以注释语句表示字符串,方便的表示包含单引号与双引号的字符串,
           而AAuto独特的段注释更可用于方便的表示大段文本。
           
    4、在代码中表示字符串时,除使用行注释以外,都可以包含换行.
    其中双引号内的字符串将换行解释为'\n',而单引号内的字符串忽略换行,段注释内换行解释为'\r\n',而行注释不能包含换行
         
二、与其他语法一些类似的地方.

   1、AAuto保证字符串内存总是用一个'\0'标志结束,所以能兼容API中的字符串类型.
   2、单引号中的转义字符串中转义符用法与C系语言类似.
   3、在双引号中,可使用两个双引号表示一个双引号,与VB类似.
   
*/

str = "ABCD" //定义一个字符串
io.print("显示第二个字符的数值", str[2] ) //使用普通下标获取字节码
io.print("显示第二个字符", str[[2]] ) //使用直接下标获取单字符

io.print("后面是字符B","B")
io.print("后面字符B的数值",'B'# ) //字符放在单引号内,并在后面跟一个#号

io.print(str[2] == 'B'# ,"字节码") //显示true,他们是相等的
io.print(str[[2]] == 'B',"字符") //显示true,他们也是相等的

//转换为一个数组
bytes  = { string.unpack(str) }
io.print( table.tostring(bytes) ) //显示{65;66;67;68}

//将数组转换为字符串
str = string.pack( bytes )
io.print( str ) // 显示"ABCD"


//字节码就是一个8位的数值.在静态结构体中的数型名是BYTE
struct = {
    BYTE str2[] = {65;66;67;68}; //一个BYTE数组在内存里就指向一个字符串
    BYTE str[] = "ABCD"; //一个字符串在内存里也就是一个BYTE数组
}

//字符串就是一个特殊的数组,
//所以他可以取到数值的字节码,也可以显示为字符,有两种表现形式.
 
execute("pause") //按任意键继续
io.close();//关闭控制台
